using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Unity.Mathematics;
using UnityEngine;

public class DrawLine : MonoBehaviour
{
    public static DrawLine instance;

    [SerializeField] GameObject linePrefab;
    private  GameObject currentLine;

    private LineRenderer lineRenderer;
    private EdgeCollider2D edgeCollider;

    [SerializeField] private List<Vector2> mousePositions = new List<Vector2>();

    private float _lineLength;
    public float lineLength
    {
        get 
        { 
            return _lineLength; 
        }
    }

    [SerializeField] private float _maxLineLength;
    public float maxLineLength
    {
        get
        {
            return _maxLineLength;
        }
    }

    private int currentPoint;

    private void Start()
    {
        instance = this;
    }

    private void Update()
    {
        if (_lineLength < _maxLineLength)
        {
            if (Input.GetMouseButtonDown(0))
            {
                CreateLine();
            }
            if (Input.GetMouseButton(0))
            {
                Vector2 tempMousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                if (Vector2.Distance(tempMousePosition, mousePositions[mousePositions.Count - 1]) > .1f)
                {
                    UpdateLine(tempMousePosition);
                }

            }
        }
        
    }

    public void CreateLine()
    {
        currentLine = Instantiate(linePrefab, Vector3.zero, quaternion.identity);
        lineRenderer = currentLine.GetComponent<LineRenderer>();
        edgeCollider = currentLine.GetComponent<EdgeCollider2D>();
        mousePositions.Clear();
        mousePositions.Add(Camera.main.ScreenToWorldPoint(Input.mousePosition));
        mousePositions.Add(Camera.main.ScreenToWorldPoint(Input.mousePosition));
        lineRenderer.SetPosition(0, mousePositions[0]);
        lineRenderer.SetPosition(1, mousePositions[1]);
        edgeCollider.points = mousePositions.ToArray();
        currentPoint = 2;
    }

    void UpdateLine(Vector2 mousePos)
    {
        mousePositions.Add(mousePos);
        lineRenderer.positionCount++;
        lineRenderer.SetPosition(lineRenderer.positionCount - 1, mousePos);
        edgeCollider.points = mousePositions.ToArray();

        _lineLength += Vector2.Distance(mousePositions[currentPoint], mousePositions[currentPoint - 1]);
    }

    
    
}
